{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww19040\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Generate dummy test and train data \
\
\
w, h = 1,600;\
ytrain = pd.DataFrame([[random.randint(0,1) for x in range(w)] for y in range(h)])\
xtrain = pd.DataFrame([[random.randint(2,12) for x in range(w)] for y in range(h)])\
\
w1, h1 = 1,300;\
ytest = pd.DataFrame([[random.randint(0,1) for x in range(w1)] for y in range(h1)])\
xtest = pd.DataFrame([[random.randint(2,12) for x in range(w1)] for y in range(h1)])\
\
\
# Fit logistic regression on training data \
\
from sklearn.linear_model import LogisticRegression\
from sklearn.cross_validation import train_test_split\
\
logreg1 = LogisticRegression( C=100000)\
logreg1.fit(xtrain, ytrain)\
\
\
# Make Prediction and check the accuracy\
y_test_probs=(logreg1.predict_proba(xtest))\
y_train_probs=(logreg1.predict_proba(xtrain))\
\
print('Accuracy of logistic regression classifier on train set: \{\}%'.format(logreg1.score(xtrain, ytrain)*100))\
print('Accuracy of logistic regression classifier on test set: \{\}%'.format(logreg1.score(xtest, ytest)*100))\
\
\
# Plot predicted probabilities\
\
plt.plot(xtest, y_test_probs[:,1],'o',label='Test Data')\
plt.plot(xtrain, y_train_probs[:,1],'o',label='Train data')\
plt.xlabel('Unemployment Rate')\
plt.ylabel('Predicted probability')\
plt.title('Predicted Outcome Probabilities')\
plt.legend()\
\
}